import React, { useState, useEffect } from 'react';

var Carousel = function Carousel(_ref) {
  var data = _ref.data,
      _ref$autoPlay = _ref.autoPlay,
      autoPlay = _ref$autoPlay === void 0 ? true : _ref$autoPlay,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'normal' : _ref$size,
      _ref$headerTextType = _ref.headerTextType,
      headerTextType = _ref$headerTextType === void 0 ? 'black' : _ref$headerTextType,
      _ref$subTextType = _ref.subTextType,
      subTextType = _ref$subTextType === void 0 ? 'white' : _ref$subTextType,
      _ref$animationDuratio = _ref.animationDuration,
      animationDuration = _ref$animationDuratio === void 0 ? 3 : _ref$animationDuratio,
      leftItem = _ref.leftItem,
      rightItem = _ref.rightItem;

  var _useState = useState(data.length > 2 ? 1 : 0),
      activeItem = _useState[0],
      setActiveItem = _useState[1];

  var _useState2 = useState(0),
      onDragState = _useState2[0],
      setOnDragState = _useState2[1];

  useEffect(function () {
    autoPlay && setTimeout(function () {
      handleNextSlide(true);
    }, animationDuration * 1000);
  }, [activeItem]);

  var handleNextSlide = function handleNextSlide(increase) {
    if (increase) {
      if (activeItem + 1 > data.length - 1) {
        setActiveItem(0);
      } else {
        setActiveItem(activeItem + 1);
      }
    } else {
      if (activeItem === 0) {
        setActiveItem(data.length - 1);
      } else {
        setActiveItem(activeItem - 1);
      }
    }
  };

  var onDragEnded = function onDragEnded(e) {
    if (e.clientX - onDragState < 150) {
      handleNextSlide(true);
    } else if (e.clientX - onDragState > 400) {
      handleNextSlide(false);
    }
  };

  var onDragStarted = function onDragStarted(e) {
    return setOnDragState(e.clientX);
  };

  return React.createElement("div", {
    className: "container " + (size === 'normal' ? 'container-normal' : 'container-large')
  }, data.map(function (item, index) {
    return React.createElement("div", {
      className: "inner " + (index === activeItem ? 'active-item' : index === activeItem + 1 ? 'right-active-item' : index === activeItem - 1 && activeItem !== 0 ? 'left-active-item' : 'inactive-items'),
      key: index,
      onDragStart: onDragStarted,
      onDragEnd: onDragEnded
    }, React.createElement("img", {
      src: item.image,
      width: "100%",
      className: "image " + (size === 'normal' ? 'image-normal' : 'image-large')
    }), item.headerText && React.createElement("p", {
      className: "header-text " + (headerTextType === 'white' ? 'header-text-white' : 'header-text-black') + "\n               " + (size === 'normal' ? 'header-text-normal-size' : ' header-text-large-size') + "\n              "
    }, item.headerText), item.subText && React.createElement("p", {
      className: "sub-text " + (subTextType === 'white' ? 'sub-text-white' : 'sub-text-black') + "\n                 " + (size === 'normal' ? 'sub-text-normal-size' : 'sub-text-large-size')
    }, item.subText), index === activeItem && React.createElement("div", {
      className: "active-render-item"
    }, leftItem ? React.createElement("div", {
      onClick: function onClick() {
        return handleNextSlide(false);
      },
      className: "custom-item"
    }, leftItem) : React.createElement("span", {
      className: "default-item",
      onClick: function onClick() {
        return handleNextSlide(false);
      }
    }, "\u2190"), rightItem ? React.createElement("div", {
      onClick: function onClick() {
        return handleNextSlide(true);
      },
      className: "custom-item"
    }, rightItem) : React.createElement("span", {
      className: "default-item",
      onClick: function onClick() {
        return handleNextSlide(true);
      }
    }, "\u2192")));
  }));
};

export { Carousel };
//# sourceMappingURL=react-carousel.esm.js.map
